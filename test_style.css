/* 
p.bar p태그 bar 클래스가 있어야 적용

.bar.foo foo 와 bar 클래스 모두 있어야 적용

#foo.bar foo 아이디와 bar 클래스 모두 있어야 적용

p[class] p 태그에 class 속성이 있어야 적용

p[class][id] p 태그에 class 속성과 id 속성 모두 있어야 적용

p[class = "foo"] p 태그에 foo 클래스가 있어야 적용

p[id = "foo"] p 태그에 foo 아이디가 있어야 적용

p[class = "foo"][id="title"] p 태그에 foo 클래스와 title 아이디가 있어야 적용

[class~="bar"] : class 속성의 값이 공백으로 구분한 "bar" 단어가 포함되는 요소 선택

[class^="bar"] : class 속성의 값이 "bar"로 시작하는 요소 선택

[class$="bar"] : class 속성의 값이 "bar"로 끝나는 요소 선택

[class*="bar"] : class 속성의 값이 "bar" 문자가 포함되는 요소 선택

div span  <div>의 자손 요소인 <span>를 선택하는 선택자 

div > h1 <div>의 자식 요소인 <h1>를 선택하는 선택자 

div + p 인접 형제 선택자는 형제 관계이면서 바로 뒤에 인접해 있는 요소를 선택하는 선택자


//가상클래스//
:first-child : 첫 번째 자식 요소 선택

:last-child : 마지막 자식 요소 선택

:link : 하이퍼 링크이면서 아직 방문하지 않은 앵커

:visited : 이미 방문한 하이퍼링크를 의미

:focus: 현재 입력 초점을 가진 요소에 적용

:hover: 마우스 포인터가 있는 요소에 적용

:active: 사용자 입력으로 활성화된 요소에 적용

//가상요소//
:before : 가장 앞에 요소를 삽입

:after : 가장 뒤에 요소를 삽입

:first-line : 요소의 첫 번째 줄에 있는 텍스트

:first-letter : 블록 레벨 요소의 첫 번째 문자

//구체성//
0, 1, 0, 0 : 선택자에 있는 모든 id 속성값

0, 0, 1, 0 : 선택자에 있는 모든 class 속성값, 기타 속성, 가상 클래스

0, 0, 0, 1 : 선택자에 있는 모든 요소, 가상 요소

인라인 스타일의 구체성 값은 1, 0, 0, 0

전체 선택자는 0, 0, 0, 0을 가진다.

조합자는 구체성에 영향을 주지 않는다. (>, + 등)

important 키워드는 별도의 구체성 값은 없지만, 모든 구체성을 무시하고 우선권을 갖는다.

important 키워드는 속성값 뒤 한 칸 공백을 주고 느낌표 기호와 함께 쓴다.

//상속//
박스 모델 속성들은 상속되지 않는다

상속된 속성은 아무런 구체성을 가지지 못한다.

//케스케이드 규칙//
1. 중요도(!important)와 출처
2. 구체성
3. 선언 순서

//상대 길이//
상대 길이

상대 길이는 다른 요소의 크기나 폰트 크기, 브라우저(viewport) 등의 크기에 따라 상대적으로 값이 변한다.

% 부모의 값에 대해서 백분율로 환산한 크기를 갖게 된다.

em font-size를 기준으로 값을 환산한다. 소수점 3자리까지 표현 가능하다.

rem root의 font-size를 기준으로 값을 환산한다.

vw viewport의 width값을 기준으로 1%의 값으로 계산된다.

//색상//

RGBA( )

RGBA 값은 기존 RGB에서 A값이 추가된 형태입니다.

rgb(R, G, B, A)의 형태로 각 변수는(R 적색, G 녹색, B 청색, A 투명도)의 강도를 정의합니다.

A 값은 0 ~ 1 사이의 값을 지정할 수 있으며, 0.5와 같이 소수점으로 표기합니다.

0 → 1은 투명 → 불투명으로 값의 변화를 나타냅니다.

예를 들어, rgba( 0, 0, 0, 0)는 투명한 색상을 가지게 됩니다.

//박스 모델//
상, 우, 하, 좌 순서대로

//마진//
좌우의 margin이 모두 auto로 적용 되었다면, 브라우저는 요소가 가질수 있는 가로 영역에서 자신의 "width(필수적)"를 제외한 나머지 여백에 크기에 대해 균등 분할 하여 적용합니다. 이에 따라 요소는 수평 중앙 정렬이 됩니다.

//마진과 패딩//
%는 상하좌우의 방향에 관계없이 모두 요소의 width 값을 기준으로 값이 결정 됩니다.

//width//
- content 요소의 너비 값을 조정

%값일 때에는 부모의 width값에 대해서 계산되어지는데,

이때 부모의 width는 content 영역의 크기를 의미한다.

//height//
- content 요소의 높이 값을 조정

%값일 때에는 부모의 height값에 대해서 계산되어지는데,

이때 부모의 height는 content 영역의 크기를 의미한다.

(부모 요소의 명시적인 height값 필요)

//line-height//
기본값: normal
줄 높이를 정하는 속성(행간 제어)

number 부모 요소의 숫자 값이 그대로 상속됩니다. 즉, 자식 요소에서도 또 한 번 자식 요소의 font-size를 기준으로 계산된 값을 가집니다.

% 부모 요소에서 %값이 그대로 상속되는 것이 아니고, %에 의해 이미 계산된 px값이 상속됩니다.

//font-size//
기본값: medium
글꼴의 기본 크기: 16px=1em

//font-weight//
normal: 400
bold: 700

//font-style//
normal: font-family 내에 분류된 기본 값

italic: italic 스타일로 표현합니다.

//vertical-align//
기본값: baseline=0
인라인 레벨 요소에만 사용 가능

//text-align//
text-align은 inline-level에 적용
text-align은 block-level에 적용할 수 없음 

//text-decoration//
텍스트의 장식을 지정하는 속성

//white-space//
요소 안 공백 처리
normal: 공백과 개행을 무시하고, 필요한 경우에 자동 줄바꿈 발생. 기본 값
nowrap: 공백과 개행을 무시하고, 자동 줄바꿈이 일어나지 않음.

//letter-spacing//
자간 조정

//word-spacing//
단어간 간격 조정

//word-break//
단어가 라인 끝에 나올 경우 어떻게 처리할지(중단점) 지정하는 속성

//word-wrap//
요소를 벗어난 단어의 줄바꿈을 지정하는 속성

//display//
inline: width, height 속성 적용 X / margin, padding, border 속성 좌우만 선언해서 사용

inline-block(inline처럼 배치, block: box model 속성 적용 O

//visibility//
visible: 요소 보임
hidden: 요소 숨김(해당 요소의 영역 유지)

//float//
요소를 보통의 흐름에서 벗어나게 하는 속성
1. 요소를 보통의 흐름에서 벗어나 띄어지게 함
2. 주변 텍스트나 인라인 요소가 주위를 감싸는 특징이 있음
3. 대부분 요소의 display 값을 block으로 변경함 (display 값 변경 예외: inline-table, flex 등)

//clear//
floating 된 요소의 영향에서 벗어나 다음 행으로 이동
block-level 요소에만 적용 가능
left: 왼쪽으로 floating 요소를 허용하지 않음

right: 오른쪽으로 floating 요소를 허용하지 않음

both: 양쪽으로 floating 요소를 허용하지 않음

//position//
static: Normal-flow 에 따라 배치되며 offset 값이 적용되지 않는다. (기본값)

relative: Normal-flow 에 따라 배치

자신이 원래 있어야 할 위치를 기준으로 offset 에 따라 배치된다.

부모의 position 속성에 영향을 받지 않는다.

absolute: Normal-flow의 흐름에서 벗어난다. display를 block으로 가짐

부모 요소의 위치를 기준으로 offset 에 따라 배치된다.

부모가 position 값(static 제외)을 가지면 offset 값의 시작점이 된다.

* 부모의 position 값이 static 인 경우 조상의 position 값이 static이
    아닐 때까지 거슬러 올라가 기준으로 삼습니다.

fixed: Normal-flow의 흐름에서 벗어난다. display를 block으로 가짐

뷰포트(브라우저의 창)를 기준으로 offset 에 따라 배치된다.

즉, 화면 스크롤에 관계없이 항상 화면의 정해진 위치에 정보가 나타난다.

부모의 위치에 영향을 받지 않는다.

//z-index//
요소가 겹치는 순서를 지정하는 속성

position 값이 static이 아닌 경우 지정가능

순서 값이 없을 경우 생성순서(코드상 순서)에 따라 쌓임

부모가 z-index 값이 있을 경우 부모 안에서만 의미있음

큰 값이 가장 위쪽(음수 사용 가능)

//@media query//
미디어 매체에 따라 다른 스타일(css style)을 적용할 수 있게 만드는 것
미디어 쿼리는 미디어 타입과 미디어 특성으로 구성
미디어 타입 - all, print, *screen*
미디어 특성 - width, orientation
media_query_list : 여러개의 미디어 쿼리로 이루어진 리스트로 작성 가능하며, 쉼표를 이용해서 구분합니다.

media_query : A 형태 - 미디어 타입에 and 키워드를 이용해서 미디어 표현식을 붙일 수 있습니다. 미디어 타잎 앞에는 only 또는 not 키워드가 올 수 있습니다. 미디어 표현식은 생략 가능하기 때문에 미디어 타입 단독으로 사용될 수 있습니다.

: B 형태 - 미디어 타입 없이 미디어 표현식이 바로 나올 수 있습니다.(미디어 타입이 명시되지 않으면 all로 간주합니다.) 미디어 표현식은 and 키워드를 이용해서 계속해서 나올 수 있습니다.

expression : 미디어 표현식은 괄호로 감싸야 하며, 특성 이름과 해당하는 값으로 이루어집니다. 이름과 값은 : 기호로 연결합니다. 또, 값이 없이 특성 이름만으로도 작성할 수 있다.

 
*/


